import Mathlib

open Topology Filter Set Order

def pos_real := Set.Ioi (0 : ‚Ñù)
noncomputable def sine_curve := fun x ‚Ü¶ (x, Real.sin (x‚Åª¬π))

def S : Set (‚Ñù √ó ‚Ñù) := (sine_curve) '' pos_real

def Z : Set (‚Ñù √ó ‚Ñù) := { (0, 0) }

def T : Set (‚Ñù √ó ‚Ñù) := S ‚à™ Z

lemma T_sub_cls_S : T ‚äÜ closure S := by
  intro x hx
  cases hx with
  | inl hxS => exact subset_closure hxS
  | inr hxZ =>
      rw [hxZ]
      let f : ‚Ñï ‚Üí ‚Ñù √ó ‚Ñù := fun n => ((n * Real.pi)‚Åª¬π, 0)
      have hf : Tendsto f atTop (ùìù (0, 0)) := by
        refine .prodMk_nhds ?_ tendsto_const_nhds
        exact tendsto_inv_atTop_zero.comp
          (Filter.Tendsto.atTop_mul_const' Real.pi_pos tendsto_natCast_atTop_atTop)
      have hf' : ‚àÄ·∂† n in atTop, f n ‚àà S := by
        filter_upwards [eventually_gt_atTop 0] with n hn
        exact ‚ü®(n * Real.pi)‚Åª¬π,
          inv_pos.mpr (mul_pos (Nat.cast_pos.mpr hn) Real.pi_pos),
          by simp [f, sine_curve, inv_inv, Real.sin_nat_mul_pi]‚ü©
      exact mem_closure_of_tendsto hf hf'

theorem T_is_conn : IsConnected T :=
IsConnected.subset_closure (isConnected_Ioi.image sine_curve <|
  continuous_id.continuousOn.prodMk <|
  Real.continuous_sin.comp_continuousOn <|
  ContinuousOn.inv‚ÇÄ continuous_id.continuousOn
  (fun _ hx => ne_of_gt hx)) (by tauto_set) T_sub_cls_S

-- T is Not Path-connected

  def z : ‚Ñù√ó‚Ñù := (0, 0)
  noncomputable def w_x: ‚Ñù := (2)‚Åª¬π
  noncomputable def w : ‚Ñù√ó‚Ñù := sine_curve w_x
  lemma h_z : z ‚àà T := by
    right
    simp [Z]
    rfl
  lemma h_w : w ‚àà T := by
    rw [T,S]
    left
    -- simp only [Set.mem_image]
    use w_x
    constructor
    ¬∑ unfold w_x pos_real Set.Ioi
      norm_num
    ¬∑ trivial

lemma norm_ge_abs_snd {a b : ‚Ñù} : ‚Äñ(a, b)‚Äñ ‚â• |b| := by
  simp only [Prod.norm_mk, Real.norm_eq_abs, ge_iff_le, le_sup_right]

lemma xcoord_pathContinuous (h_path : unitInterval ‚Üí ‚Ñù √ó ‚Ñù)
(hCont : Continuous h_path) : Continuous (fun t => (h_path t).1) :=
  continuous_fst.comp hCont

noncomputable def xs_pos_peak := fun (k : ‚Ñï) => 2/((4 * k + 1) * Real.pi)
lemma h_sin_xs_pos_peak_eq_one : ‚àÄ k : ‚Ñï, k ‚â• 1 ‚Üí Real.sin ((xs_pos_peak k)‚Åª¬π) = 1 := by
  intro k hk
  calc Real.sin ((xs_pos_peak k)‚Åª¬π) = Real.sin (((4 * k + 1) * Real.pi)/2) := by
        unfold xs_pos_peak
        field_simp
      _ = Real.sin (Real.pi/2 + 2*k*Real.pi) := by
        field_simp
        ring_nf
      _ = Real.sin (Real.pi/2 + k*(2*Real.pi)) := by
        ring_nf
      _ = Real.sin (Real.pi/2) := by
        rw [Real.sin_add_nat_mul_two_pi]
      _ = 1 := by
        exact Real.sin_pi_div_two

lemma xs_pos_peak_tendsto_zero : Tendsto xs_pos_peak atTop (ùìù 0) := by
  unfold xs_pos_peak
  refine Tendsto.comp (g := fun k : ‚Ñù ‚Ü¶ 2 / ((4 * k + 1) * Real.pi))
    ?_ tendsto_natCast_atTop_atTop
  simp only [div_eq_mul_inv]
  have h : Tendsto (fun k => ((4 * k + 1) * Real.pi)‚Åª¬π) atTop (ùìù 0) := by
    apply Tendsto.comp tendsto_inv_atTop_zero
    apply Tendsto.atTop_mul_const Real.pi_pos
    apply tendsto_atTop_add_const_right
    apply Tendsto.const_mul_atTop four_pos
    exact tendsto_id
  convert Tendsto.const_mul 2 h
  ¬∑ norm_num

lemma xs_pos_peak_pos : ‚àÄ k : ‚Ñï, 0 ‚â§ xs_pos_peak k := by
  intro k
  unfold xs_pos_peak
  apply div_nonneg
  ¬∑ norm_num
  ¬∑ apply mul_nonneg
    ¬∑ linarith
    ¬∑ exact Real.pi_pos.le

theorem T_is_not_path_conn : ¬¨ (IsPathConnected T)  := by
  -- Assume we have a path from z= (0, 0) to w=(1/2, sin(1/2))
  intro h_pathConn
  apply IsPathConnected.joinedIn at h_pathConn
  specialize h_pathConn z h_z w h_w
  let h_path := JoinedIn.somePath h_pathConn

  -- consider the xcoordinate map wich is conituous
  -- the composition of the path with the xcoordinate map is continuous
  let xcoord_path := fun t => (h_path t).1
  have xcoord_pathContinuous : Continuous (xcoord_path : unitInterval ‚Üí ‚Ñù) := by
    apply Continuous.comp
    ¬∑ exact continuous_fst
    ¬∑ exact h_path.continuous

  -- let t‚ÇÄ the last time the path is on the y-axis
  let A : Set unitInterval := { t | (h_path t).1 = 0 }
  let t‚ÇÄ : unitInterval := sSup A

  -- h_xcoord_path_at_zero_eq_zero = 0
    -- (3.1) let A = {t | xcoord_path t = 0}
    -- A is a closed set in unitInterval
    -- since it is the preimage of a closed set under a continuous function
    -- hence it is compact
    -- since unitInterval is compact
    -- hence it is closed
  have h_t‚ÇÄ_mem : t‚ÇÄ ‚àà A :=
    have h_A_nonempty : A.Nonempty := by
      use 0
      have h_xcoord_path0 : xcoord_path 0 = 0 := by
        simp only [xcoord_path]
        rw [h_path.source]
        rfl
      exact h_xcoord_path0
    have A_closed : IsClosed A := isClosed_singleton.preimage xcoord_pathContinuous
    IsCompact.sSup_mem A_closed.isCompact h_A_nonempty
  have h_xcoord_path_at_zero_eq_zero : xcoord_path t‚ÇÄ = 0 := h_t‚ÇÄ_mem

  -- the path at t‚ÇÄ is (0, 0) (not so sure of this proof)
  have h_pathT‚ÇÄ: h_path t‚ÇÄ = z := by
    unfold z
    apply Prod.ext_iff.mpr

    have h_pathT‚ÇÄIsInT : h_path t‚ÇÄ ‚àà T := by
      exact h_pathConn.somePath_mem t‚ÇÄ

    have h_pathT‚ÇÄ_x_is_0 : (h_path t‚ÇÄ).1 = 0 := by
      exact h_xcoord_path_at_zero_eq_zero

    unfold T at h_pathT‚ÇÄIsInT

    constructor
    ¬∑ apply h_xcoord_path_at_zero_eq_zero
    ¬∑cases h_pathT‚ÇÄIsInT with
    | inl hS =>
        exfalso

        obtain ‚ü®xpos_real, hxInpos_real, h_eq_path‚ü© := hS
        let x_val : ‚Ñù := xpos_real
        have hx_valPos : x_val > 0 := by
         dsimp [x_val] at *
         dsimp [pos_real] at hxInpos_real
         simpa using hxInpos_real

        have h_path_x_eq_x_val : (h_path t‚ÇÄ).1 = x_val := by
          simpa [sine_curve, x_val] using
          (congrArg Prod.fst h_eq_path).symm


        rw [h_path_x_eq_x_val] at h_pathT‚ÇÄ_x_is_0
        linarith [hx_valPos, h_pathT‚ÇÄ_x_is_0]

    | inr h_Z =>

        have h_Z_eq : h_path t‚ÇÄ = (0, 0) := by
          simpa [Z] using h_Z

        have h_pathT‚ÇÄ_y_is_0 : (h_path t‚ÇÄ).2 = 0 := by
          simpa using congrArg Prod.snd h_Z_eq

        exact h_pathT‚ÇÄ_y_is_0

  -- (3.2) let Œµ = 1/ 2, by continuity of the path, we can find a Œ¥ > 0 such that
  -- for all t in [t‚ÇÄ, t‚ÇÄ + Œ¥], ||p(t) - p(t‚ÇÄ)|| < 1/2
  -- hence the path is in a ball of radius 1/2 around (0, 0)

  have eps_delta_bound_at_t‚ÇÄ : ‚àÉ Œ¥ > 0, ‚àÄ t : unitInterval, dist t t‚ÇÄ < Œ¥ ‚Üí
    dist (h_path t) (h_path t‚ÇÄ) < 1/2 := by
    have hTendstoEventually := Metric.tendsto_nhds.mp (h_path.continuousAt t‚ÇÄ)
    have hEventually : ‚àÄ·∂† (t : unitInterval) in ùìù t‚ÇÄ, dist (h_path t) (h_path t‚ÇÄ) < 1/2 := by
      specialize hTendstoEventually (1/2)
      apply hTendstoEventually
      norm_num
    exact Metric.eventually_nhds_iff.mp hEventually

  obtain ‚ü®Œ¥ , hŒ¥, ht‚ü© := eps_delta_bound_at_t‚ÇÄ

  -- let t‚ÇÅ be the a time the path is not on the y-axis
  -- t‚ÇÅ is in (t‚ÇÄ, t‚ÇÄ + Œ¥]
  -- hence t‚ÇÅ > t‚ÇÄ
  -- hence xcoord(p(t‚ÇÅ)) > 0
  -- this is terrible

  have h_t‚ÇÅ_ge_t‚ÇÄ_in_eps_delta_bound : ‚àÉ t‚ÇÅ:unitInterval, t‚ÇÅ > t‚ÇÄ  ‚àß dist t‚ÇÄ t‚ÇÅ < Œ¥ := by
    let s‚ÇÄ := (t‚ÇÄ : ‚Ñù ) -- t‚ÇÄ is in unitInterval
    let s‚ÇÅ := min (s‚ÇÄ + Œ¥/2) 1
    have h_s‚ÇÄ_delta_pos : s‚ÇÄ + Œ¥/2 > 0 := by
      apply add_pos_of_nonneg_of_pos
      ¬∑ exact unitInterval.nonneg t‚ÇÄ
      ¬∑ exact div_pos hŒ¥ (by norm_num)

    have hs‚ÇÅ : s‚ÇÅ ‚â• 0 := by
      have h1 : (0 : ‚Ñù) ‚â§ s‚ÇÄ + Œ¥/2 := le_of_lt h_s‚ÇÄ_delta_pos
      have h2 : (0 : ‚Ñù) ‚â§ (1 : ‚Ñù) := by norm_num
      have : (0 : ‚Ñù) ‚â§ min (s‚ÇÄ + Œ¥/2) 1 := le_min h1 h2
      simpa [s‚ÇÅ] using this

    have h': s‚ÇÅ ‚â§ 1 := by
      apply min_le_right

    use ‚ü®s‚ÇÅ, hs‚ÇÅ, h'‚ü©
    have t‚ÇÄ_lt_one : t‚ÇÄ < 1 := by
      apply lt_of_le_of_ne
      ¬∑ exact unitInterval.le_one t‚ÇÄ
      ¬∑ intro h_eq_one
        have w_x_path : xcoord_path 1 = w_x := by
          simp only [xcoord_path]
          rw [h_path.target]
          simp only [w, sine_curve, w_x]
        have w_x_pos : w_x > 0 := by
          unfold w_x
          norm_num
        have x_eq_zero : xcoord_path 1 = 0 := by
          rw [h_eq_one] at h_t‚ÇÄ_mem
          exact h_t‚ÇÄ_mem
        rw [w_x_path] at x_eq_zero
        exact ne_of_gt w_x_pos x_eq_zero
    have dist_case : dist t‚ÇÄ ‚ü®s‚ÇÅ, hs‚ÇÅ, h'‚ü© < Œ¥ := by
      rw [Subtype.dist_eq]
      simp only [ Real.dist_eq]

      have h_le : s‚ÇÅ ‚â§ s‚ÇÄ + Œ¥/2 := min_le_left _ _

      have h_ge : s‚ÇÅ ‚â• s‚ÇÄ := by
        by_cases h : s‚ÇÄ + Œ¥/2 ‚â§ 1
        ¬∑ have : s‚ÇÅ = s‚ÇÄ + Œ¥/2 := min_eq_left h
          rw [this]
          linarith
        ¬∑ push_neg at h
          have : s‚ÇÅ = 1 := min_eq_right (le_of_lt h)
          rw [this]
          exact le_of_lt t‚ÇÄ_lt_one
      have h_diff : s‚ÇÅ - s‚ÇÄ ‚â§ Œ¥/2 := by linarith
      have h_nonneg : 0 ‚â§ s‚ÇÅ - s‚ÇÄ := by linarith
      rw [‚Üê abs_neg, neg_sub, abs_of_nonneg h_nonneg]
      linarith
    constructor
    ¬∑ simp only [gt_iff_lt, s‚ÇÅ,s‚ÇÄ,‚Üê Subtype.coe_lt_coe]
      apply lt_min
      ¬∑ exact (lt_add_iff_pos_right _).mpr (half_pos hŒ¥)
      ¬∑ exact t‚ÇÄ_lt_one
    ¬∑ simp only [ s‚ÇÅ, s‚ÇÄ]
      exact dist_case

  obtain ‚ü®t‚ÇÅ, ht‚ÇÅ‚ü© := h_t‚ÇÅ_ge_t‚ÇÄ_in_eps_delta_bound

  --- let a = xcoord_path t‚ÇÅ > 0
  let a := xcoord_path t‚ÇÅ
  have ha : a > 0 := by
    unfold a xcoord_path
    have h_pathT‚ÇÅ : h_path t‚ÇÅ ‚àà S := by
      cases h_pathConn.somePath_mem t‚ÇÅ with
      | inl hS => exact hS
      | inr h_Z =>
          exfalso
          have x_coord_eq_zero : (h_path t‚ÇÅ).1 = 0 := by rw [h_Z];
          have ht‚ÇÅ_in_A : t‚ÇÅ ‚àà A := x_coord_eq_zero
          have h_bdd : BddAbove A := by
            use 1
            intro s hs
            exact unitInterval.le_one s
          have h_le : t‚ÇÅ ‚â§ t‚ÇÄ := le_csSup h_bdd ht‚ÇÅ_in_A
          have h_le_real : (t‚ÇÅ : ‚Ñù) ‚â§ (t‚ÇÄ : ‚Ñù) := Subtype.coe_le_coe.mpr h_le
          have : ¬¨(t‚ÇÅ > t‚ÇÄ) := not_lt_of_ge h_le
          exact this ht‚ÇÅ.1

    have h_pathT‚ÇÅ_x_pos : (h_path t‚ÇÅ).1 > 0 := by
      obtain ‚ü®x, hxI, hx_eq‚ü© := h_pathT‚ÇÅ
      dsimp [pos_real] at hxI
      rw [‚Üê hx_eq]
      exact (Set.mem_Ioi.mp hxI)
    exact h_pathT‚ÇÅ_x_pos

  --The image x(p([t0, t1])) is connected
  let intervalT‚ÇÄT‚ÇÅ := Set.Icc t‚ÇÄ t‚ÇÅ

  have xcoord_pathOfT‚ÇÄT‚ÇÅConn:
      IsConnected (xcoord_path '' intervalT‚ÇÄT‚ÇÅ) := by

    have hConn : IsConnected intervalT‚ÇÄT‚ÇÅ := by
      unfold intervalT‚ÇÄT‚ÇÅ
      refine isConnected_Icc ?_
      ¬∑ exact le_of_lt ht‚ÇÅ.1
    have hCont : ContinuousOn xcoord_path intervalT‚ÇÄT‚ÇÅ := by
      apply xcoord_pathContinuous.continuousOn

    exact hConn.image _ hCont

  -- and contains 0 = x(p(t‚ÇÄ)) and a = x(p(t‚ÇÅ))
  let zero :=  xcoord_path t‚ÇÄ

  have leftEnd :
      zero ‚àà ( xcoord_path '' intervalT‚ÇÄT‚ÇÅ) := by
      use t‚ÇÄ
      constructor
      ¬∑ simp only [intervalT‚ÇÄT‚ÇÅ, Set.mem_Icc]
        constructor
        ¬∑ exact le_refl t‚ÇÄ
        ¬∑ exact le_of_lt ht‚ÇÅ.1
      ¬∑ rfl

  have rightEnd :
      a ‚àà ( xcoord_path '' intervalT‚ÇÄT‚ÇÅ) := by
      use t‚ÇÅ
      constructor
      ¬∑ simp only [intervalT‚ÇÄT‚ÇÅ, Set.mem_Icc]
        constructor
        ¬∑ exact le_of_lt ht‚ÇÅ.1
        ¬∑ exact le_refl t‚ÇÅ
      ¬∑ rfl

  --and every connected subset of R is an interval, so
  -- (3.3) [0, a] ‚äÇ x(p([t0, t1])).
  let intervalAZero := Set.Icc zero a
  have intervalAZeroSubOfT‚ÇÄT‚ÇÅXcoord : intervalAZero ‚äÜ xcoord_path '' intervalT‚ÇÄT‚ÇÅ := by

    apply IsConnected.Icc_subset
    ¬∑ exact xcoord_pathOfT‚ÇÄT‚ÇÅConn
    ¬∑ exact leftEnd
    ¬∑ exact rightEnd

  --let xs_pos_peak a sequence of x-values where sin(1/x) = 1
  -- i.e. for any k ‚àà ‚Ñï , sin(1/xs_pos_peak(k)) = 1
  -- xs_pos_peak converges to 0 as k ‚Üí ‚àû
  -- thus there are some indicies i for wich xs_pos_peak i is in [0, a]

  have h_existsSeqInInterval :  ‚àÉ i : ‚Ñï, i ‚â• 1 ‚àß xs_pos_peak i ‚àà intervalAZero  := by

    have h_conv := Metric.tendsto_nhds.mp xs_pos_peak_tendsto_zero (a/2) (by positivity)
    rw [Filter.eventually_atTop] at h_conv
    obtain ‚ü®N, hN‚ü© :=  h_conv

    let j :=  max 1 N
    use j
    constructor
    ¬∑ exact le_max_left 1 N
    ¬∑ unfold intervalAZero
      simp only [Set.mem_Icc]
      constructor
      ¬∑ unfold zero
        rw [h_xcoord_path_at_zero_eq_zero]
        exact xs_pos_peak_pos j
      ¬∑ have h_pos : xs_pos_peak j ‚â§ a := by
          have hj : j ‚â• N := le_max_right 1 N
          have h_dist : dist (xs_pos_peak j) 0 < a / 2 := hN j hj
          rw [Real.dist_eq] at h_dist
          have h_nonneg : 0 ‚â§ xs_pos_peak j := xs_pos_peak_pos j
          rw [sub_zero, abs_of_nonneg h_nonneg] at h_dist
          linarith
        exact h_pos

  -- Now we can show that there exists s‚ÇÅ in [t‚ÇÄ, t‚ÇÅ] ‚äÜ [t‚ÇÄ, t‚ÇÄ + Œ¥) such that:
  -- 1. h_path(s‚ÇÅ) = (*,1)
  have h_Path_s‚ÇÅ :  ‚àÉ s‚ÇÅ ‚àà intervalT‚ÇÄT‚ÇÅ, (h_path s‚ÇÅ).2 = 1 := by

    obtain ‚ü®i, ‚ü® hige ,hi‚ü© ‚ü© := h_existsSeqInInterval
    obtain ‚ü®s‚ÇÅ, hs‚ÇÅ‚ü© := intervalAZeroSubOfT‚ÇÄT‚ÇÅXcoord hi
    use s‚ÇÅ
    constructor
    ¬∑ exact hs‚ÇÅ.1
    ¬∑ have : (h_path s‚ÇÅ).2 = Real.sin ((xs_pos_peak i)‚Åª¬π) := by
        have h : (h_path s‚ÇÅ) ‚àà S := by
          have h_in_T : h_path s‚ÇÅ ‚àà T := h_pathConn.somePath_mem s‚ÇÅ
          cases h_in_T with
                | inl hS => exact hS
                | inr h_Z =>
                  exfalso
                  have h_eq_path : h_path s‚ÇÅ = (0, 0) := by simpa using h_Z
                  have h_x_zero : (h_path s‚ÇÅ).1 = 0 := by rw [h_eq_path];
                  have h_x_eq_seq : (h_path s‚ÇÅ).1 = xs_pos_peak i := hs‚ÇÅ.2
                  have h_seq_zero : xs_pos_peak i = 0 := by rw [‚Üê h_x_eq_seq, h_x_zero]
                  have h_sin_one : Real.sin (xs_pos_peak i)‚Åª¬π = 1 := h_sin_xs_pos_peak_eq_one i hige
                  rw [h_seq_zero] at h_sin_one
                  simp at h_sin_one

        obtain ‚ü®xpos_real, hxInpos_real, h_eq_path‚ü© := h

        dsimp [sine_curve] at h_eq_path
        have xIsSeq: xpos_real = xs_pos_peak i := by
          have h_eq_x : (h_path s‚ÇÅ).1 = xpos_real := (congrArg Prod.fst h_eq_path).symm
          have h_eq_path_seq : (h_path s‚ÇÅ).1 = xs_pos_peak i := hs‚ÇÅ.2
          exact Eq.trans h_eq_x.symm h_eq_path_seq
        rw [xIsSeq] at h_eq_path
        rw [‚Üê h_eq_path]
      rw [this]
      exact h_sin_xs_pos_peak_eq_one i hige


  have h_path_contradiction : False := by

    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ, h_pathx‚ÇÅ‚ü© := h_Path_s‚ÇÅ

    have x‚ÇÅ_close_to_t‚ÇÄ : dist x‚ÇÅ t‚ÇÄ < Œ¥ := by
      unfold intervalT‚ÇÄT‚ÇÅ at hx‚ÇÅ
      simp only [Set.mem_Icc] at hx‚ÇÅ
      have hx‚ÇÅDelta: ‚àÄ t ‚àà intervalT‚ÇÄT‚ÇÅ, dist t t‚ÇÄ < Œ¥ := by
        intro t ht
        unfold intervalT‚ÇÄT‚ÇÅ at ht
        simp only [Set.mem_Icc] at ht

        have dist_t_t‚ÇÄ_le_dist_t‚ÇÅ_t‚ÇÄ : dist t t‚ÇÄ ‚â§ dist t‚ÇÅ t‚ÇÄ := by

          rw [Subtype.dist_eq, Subtype.dist_eq]
          have h1 : t‚ÇÄ ‚â§ t := ht.1
          have h2 : t ‚â§ t‚ÇÅ := ht.2
          have h3 : (t‚ÇÄ : ‚Ñù) < t‚ÇÅ := Subtype.coe_lt_coe.mpr ht‚ÇÅ.1

          change |(t : ‚Ñù) - (t‚ÇÄ : ‚Ñù)| ‚â§ |(t‚ÇÅ : ‚Ñù) - (t‚ÇÄ : ‚Ñù)|
          rw [abs_of_nonneg, abs_of_nonneg]
          ¬∑ simp only [sub_le_sub_iff_right]
            exact Subtype.coe_le_coe.mpr h2
          ¬∑ simp only [sub_nonneg]
            exact le_of_lt h3
          ¬∑ simp only [sub_nonneg]
            exact Subtype.coe_le_coe.mpr h1
        calc dist t t‚ÇÄ ‚â§ dist t‚ÇÅ t‚ÇÄ := dist_t_t‚ÇÄ_le_dist_t‚ÇÅ_t‚ÇÄ
            _ = dist t‚ÇÄ t‚ÇÅ := by rw [dist_comm t‚ÇÄ t‚ÇÅ]
            _ < Œ¥ := ht‚ÇÅ.2
      apply hx‚ÇÅDelta
      ¬∑ exact hx‚ÇÅ

    have path_far : dist (h_path x‚ÇÅ) (h_path t‚ÇÄ) > 1/2 := by
      rw [h_pathT‚ÇÄ]
      unfold z
      simp only [dist_eq_norm]
      have : ‚Äñh_path x‚ÇÅ - (0, 0)‚Äñ ‚â• |(h_path x‚ÇÅ).2 - 0| := by
        exact norm_ge_abs_snd
      apply gt_of_ge_of_gt this
      simp only [h_pathx‚ÇÅ]
      norm_num

    have path_close : dist (h_path x‚ÇÅ) (h_path t‚ÇÄ) < 1/2 := by
      apply ht
      exact x‚ÇÅ_close_to_t‚ÇÄ

    rw [h_pathT‚ÇÄ] at path_close
    rw [h_pathT‚ÇÄ] at path_far
    exact lt_asymm path_close path_far

  exfalso
  ¬∑ exact h_path_contradiction

theorem T_isconn_not_path_conn : IsConnected T ‚àß ¬¨IsPathConnected T :=
  ‚ü®T_is_conn,T_is_not_path_conn ‚ü©
