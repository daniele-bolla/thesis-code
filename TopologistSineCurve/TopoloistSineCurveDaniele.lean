import Mathlib
open Real Set Filter Topology

def pos_real := Set.Ioi (0 : ‚Ñù)
noncomputable def sine_curve := fun x ‚Ü¶ (x, Real.sin (x‚Åª¬π))
def S : Set (‚Ñù √ó ‚Ñù) := (sine_curve) '' pos_real
def Z : Set (‚Ñù √ó ‚Ñù) := { (0, 0) }
def T : Set (‚Ñù √ó ‚Ñù) := S ‚à™ Z

-- T is connected
lemma T_sub_cls_S : T ‚äÜ closure S := by
  intro x hx
  cases hx with
  | inl hxS => exact subset_closure hxS
  | inr hxZ =>
      rw [hxZ]
      let f : ‚Ñï ‚Üí ‚Ñù √ó ‚Ñù := fun n => ((n * Real.pi)‚Åª¬π, 0)
      have hf : Tendsto f atTop (ùìù (0, 0)) := by
        refine .prodMk_nhds ?_ tendsto_const_nhds
        exact tendsto_inv_atTop_zero.comp
          (Filter.Tendsto.atTop_mul_const' Real.pi_pos tendsto_natCast_atTop_atTop)
      have hf' : ‚àÄ·∂† n in atTop, f n ‚àà S := by
        filter_upwards [eventually_gt_atTop 0] with n hn
        exact ‚ü®(n * Real.pi)‚Åª¬π,
          inv_pos.mpr (mul_pos (Nat.cast_pos.mpr hn) Real.pi_pos),
          by simp [f, sine_curve, inv_inv, Real.sin_nat_mul_pi]‚ü©
      exact mem_closure_of_tendsto hf hf'
theorem T_is_conn : IsConnected T :=
  IsConnected.subset_closure (isConnected_Ioi.image sine_curve <|
    continuous_id.continuousOn.prodMk <|
    Real.continuous_sin.comp_continuousOn <|
    ContinuousOn.inv‚ÇÄ continuous_id.continuousOn
    (fun _ hx => ne_of_gt hx)) (by tauto_set) T_sub_cls_S

-- T is Not Path-connected
-- utility lemma
lemma norm_ge_abs_snd {a b : ‚Ñù} : ‚Äñ(a, b)‚Äñ ‚â• |b| := by simp
-- define a positive sequence in S such that when composed with the sinCurve is always 1
noncomputable def xs_pos_peak := fun (k : ‚Ñï) => 2/((4 * k + 1) * Real.pi)
lemma xs_pos_peak_tendsto_zero : Tendsto xs_pos_peak atTop (ùìù 0) := by
  refine Tendsto.comp (g := fun k : ‚Ñù ‚Ü¶ 2 / ((4 * k + 1) * Real.pi))
    ?_ tendsto_natCast_atTop_atTop
  simp only [div_eq_mul_inv, show ùìù 0 = ùìù (2 * (0 : ‚Ñù)) by simp]
  exact Tendsto.const_mul 2 <| Tendsto.comp tendsto_inv_atTop_zero <|
    Tendsto.atTop_mul_const Real.pi_pos <| tendsto_atTop_add_const_right _ 1 <|
    Tendsto.const_mul_atTop four_pos tendsto_id

lemma xs_pos_peak_nonneg : ‚àÄ k : ‚Ñï, 0 ‚â§ xs_pos_peak k := fun k =>
  div_nonneg (by norm_num) (by positivity)
lemma sin_xs_pos_peak_eq_one (k : ‚Ñï) : Real.sin ((xs_pos_peak k)‚Åª¬π) = 1 := by
  have : (xs_pos_peak k)‚Åª¬π = Real.pi / 2 + k * (2 * Real.pi) := by
    simp [xs_pos_peak]; field_simp; ring
  simp [this, Real.sin_add_nat_mul_two_pi, Real.sin_pi_div_two]

def z : ‚Ñù√ó‚Ñù := (0, 0)
noncomputable def w : ‚Ñù√ó‚Ñù := sine_curve (1)

theorem T_is_not_path_conn : ¬¨ (IsPathConnected T)  := by
  -- Assume we have a path from z= (0, 0) to w=(1, sin(1))
  have hz : z ‚àà T := Or.inr rfl
  have hw : w ‚àà T := Or.inl ‚ü®1, ‚ü®zero_lt_one' ‚Ñù, rfl‚ü©‚ü©
  intro p_conn
  apply IsPathConnected.joinedIn at p_conn
  specialize p_conn z hz w hw
  let p := JoinedIn.somePath p_conn
  -- consider the composition of the xcoordinate map with p, wich  is continuous
  have xcoord_pathcont : Continuous fun t ‚Ü¶ (p t).1 := continuous_fst.comp p.continuous
  -- let t‚ÇÄ the last time the path is on the y-axis
  let t‚ÇÄ : unitInterval := sSup {t | (p t).1 = 0}
  let xcoord_path := fun t => (p t).1
  -- the xcoordinate of path at t‚ÇÄ is 0
  have hpt‚ÇÄ_x : (p t‚ÇÄ).1 = 0 :=
    (isClosed_singleton.preimage xcoord_pathcont).sSup_mem ‚ü®0, by aesop‚ü©
  -- (3.2) let Œµ = 1/2, by continuity of the path, we can find a Œ¥ > 0 such that
  -- for all t in [t‚ÇÄ, t‚ÇÄ + Œ¥], ||p(t) - p(t‚ÇÄ)|| < 1/2
  -- hence the path is in a ball of radius 1/2 around (0, 0)
  obtain ‚ü®Œ¥ , hŒ¥, ht‚ü© : ‚àÉ Œ¥ > 0, ‚àÄ t, dist t t‚ÇÄ < Œ¥ ‚Üí
    dist (p t) (p t‚ÇÄ) < 1/2 :=
    Metric.eventually_nhds_iff.mp <| Metric.tendsto_nhds.mp (p.continuousAt t‚ÇÄ) _ one_half_pos
  -- let t‚ÇÅ be the a time the path is not on the y-axis
  -- t‚ÇÅ is in (t‚ÇÄ, t‚ÇÄ + Œ¥]
  -- hence t‚ÇÅ > t‚ÇÄ
  obtain ‚ü®t‚ÇÅ, ht‚ÇÅ‚ü© : ‚àÉ t‚ÇÅ, t‚ÇÅ > t‚ÇÄ  ‚àß dist t‚ÇÄ t‚ÇÅ < Œ¥ := by
    let s‚ÇÄ := (t‚ÇÄ : ‚Ñù ) -- cast t‚ÇÄ from unitInterval to ‚Ñù for manipulation
    let s‚ÇÅ := min (s‚ÇÄ + Œ¥/2) 1
    have hs‚ÇÄ_delta_pos : 0 ‚â§ s‚ÇÄ + Œ¥/2 := add_nonneg t‚ÇÄ.2.1 (by positivity)
    have hs‚ÇÅ : 0 ‚â§ s‚ÇÅ := le_min hs‚ÇÄ_delta_pos zero_le_one
    have hs‚ÇÅ': s‚ÇÅ ‚â§ 1 := min_le_right ..
    use ‚ü®s‚ÇÅ, hs‚ÇÅ, hs‚ÇÅ'‚ü©
    constructor
    ¬∑ simp only [gt_iff_lt, s‚ÇÅ,s‚ÇÄ,‚Üê Subtype.coe_lt_coe]
      apply lt_min
      ¬∑ exact (lt_add_iff_pos_right _).mpr (half_pos hŒ¥)
      ¬∑ apply lt_of_le_of_ne (unitInterval.le_one t‚ÇÄ)
        ¬∑ intro ht‚ÇÄ
          have w_x_path : (p 1).1 = 1 := by simp [sine_curve, w]
          have t‚ÇÄ_eq_1 : t‚ÇÄ = 1 := Subtype.ext ht‚ÇÄ
          have x_eq_zero : (p 1).1 = 0 := by
            rw [‚Üê t‚ÇÄ_eq_1]
            exact hpt‚ÇÄ_x
          linarith
    ¬∑ have hle : s‚ÇÅ ‚â§ s‚ÇÄ + Œ¥/2 := min_le_left _ _
      have hge : s‚ÇÄ ‚â§ s‚ÇÅ := le_min (by linarith) t‚ÇÄ.2.2
      rw [Subtype.dist_eq, dist_comm, dist_eq, abs_of_nonneg (by linarith)]
      linarith
  --- let a = xcoord_path t‚ÇÅ > 0
  -- this must follow by def of t‚ÇÄ and  t‚ÇÄ < t‚ÇÅ
  -- so t‚ÇÅ must be in S wich has positive x coordinate
  let a := (p t‚ÇÅ).1
  have ha : a > 0 := by
    obtain ‚ü®x, hxI, hx_eq‚ü© : p t‚ÇÅ ‚àà S := by
      cases p_conn.somePath_mem t‚ÇÅ with
      | inl hS => exact hS
      | inr hZ =>
      -- If p t‚ÇÅ ‚àà Z, then (p t‚ÇÅ).1 = 0
        have : (p t‚ÇÅ).1 = 0 := by rw [hZ]
        -- So t‚ÇÅ ‚â§ t‚ÇÄ, contradicting t‚ÇÅ > t‚ÇÄ
        have hle : t‚ÇÅ ‚â§ t‚ÇÄ := le_sSup this
        have hle_real : (t‚ÇÅ : ‚Ñù) ‚â§ (t‚ÇÄ : ‚Ñù) := Subtype.coe_le_coe.mpr hle
        have hgt_real : (t‚ÇÅ : ‚Ñù) > (t‚ÇÄ : ‚Ñù) := Subtype.coe_lt_coe.mpr ht‚ÇÅ.1
        linarith
    simpa only [a, ‚Üê hx_eq] using hxI
  -- The image x(p([t‚ÇÄ, t‚ÇÅ])) is connected and contains 0 and a
  -- Therefore [0, a] ‚äÜ x(p([t‚ÇÄ, t‚ÇÅ]))
  have Icc_of_a_b_sub_Icc_t‚ÇÄ_t‚ÇÅ: Set.Icc 0 a ‚äÜ xcoord_path '' Set.Icc t‚ÇÄ t‚ÇÅ :=
     IsConnected.Icc_subset
      ((isConnected_Icc (le_of_lt ht‚ÇÅ.1)).image _ xcoord_pathcont.continuousOn)
      (‚ü®t‚ÇÄ, left_mem_Icc.mpr (le_of_lt ht‚ÇÅ.1), hpt‚ÇÄ_x‚ü©)
      (‚ü®t‚ÇÅ, right_mem_Icc.mpr (le_of_lt ht‚ÇÅ.1), rfl‚ü©)
  -- let xs_pos_peak a sequence of x-values where sin(1/x) = 1
  -- i.e. for any k ‚àà ‚Ñï , sin(1/xs_pos_peak(k)) = 1
  -- xs_pos_peak converges to 0 as k ‚Üí ‚àû
  -- thus there are some indicies i for wich xs_pos_peak i is in [0, a]
  have xpos_has_terms_in_Icc_of_a_b : ‚àÉ i : ‚Ñï, i ‚â• 1 ‚àß xs_pos_peak i ‚àà Set.Icc 0 a := by
    obtain ‚ü®N, hN‚ü© := (Metric.tendsto_nhds.mp xs_pos_peak_tendsto_zero (a/2)
      (by positivity)).exists_forall_of_atTop
    use max 1 N
    refine ‚ü®le_max_left _ _, xs_pos_peak_nonneg _, ?_‚ü©
    have : dist (xs_pos_peak (max 1 N)) 0 < a / 2 := hN _ (le_max_right _ _)
    rw [Real.dist_eq, sub_zero, abs_of_nonneg (xs_pos_peak_nonneg _)] at this
    linarith

  -- Now we can show that there exist time s‚ÇÅ in [t‚ÇÄ, t‚ÇÅ] ‚äÜ [t‚ÇÄ, t‚ÇÄ + Œ¥) such that:
  -- 1. p(s‚ÇÅ) = (*,1)
  obtain ‚ü®s‚ÇÅ, hs‚ÇÅ, hpath_s‚ÇÅ‚ü© : ‚àÉ s‚ÇÅ ‚àà Set.Icc t‚ÇÄ t‚ÇÅ, (p s‚ÇÅ).2 = 1 := by
    obtain ‚ü®i, hige, hi‚ü© := xpos_has_terms_in_Icc_of_a_b
    have : xs_pos_peak i ‚àà xcoord_path '' Set.Icc t‚ÇÄ t‚ÇÅ := Icc_of_a_b_sub_Icc_t‚ÇÄ_t‚ÇÅ hi
    obtain ‚ü®s‚ÇÅ, hs‚ÇÅ_mem, hs‚ÇÅ_x‚ü© := this
    use s‚ÇÅ, hs‚ÇÅ_mem
    -- Show p s‚ÇÅ ‚àà S (not in Z, since that would make xs_pos_peak i = 0)
    have hin_S : p s‚ÇÅ ‚àà S := by
      cases p_conn.somePath_mem s‚ÇÅ with
      | inl hS => exact hS
      | inr hZ =>
        have heq_zero : p s‚ÇÅ = (0, 0) := Set.mem_singleton_iff.mp hZ
        have : xs_pos_peak i = 0 := by
          calc xs_pos_peak i
              = (p s‚ÇÅ).1 := by simpa [xcoord_path] using hs‚ÇÅ_x.symm
            _ = (0, 0).1 := by rw [heq_zero]
            _ = 0 := rfl
        simpa [this] using sin_xs_pos_peak_eq_one i
    -- Since p s‚ÇÅ ‚àà S, we have p s‚ÇÅ = (x, sin(1/x)) for some x > 0
    obtain ‚ü®x, _, heq‚ü© := hin_S
    -- But x = xs_pos_peak i (from the x-coordinate), so sin(1/x) = 1
    have hx : x = xs_pos_peak i := by
      have : (p s‚ÇÅ).1 = x := by simpa [sine_curve] using congrArg Prod.fst heq.symm
      calc x = (p s‚ÇÅ).1 := this.symm
          _ = xcoord_path s‚ÇÅ := rfl
          _ = xs_pos_peak i := hs‚ÇÅ_x
    rw [‚Üê heq, sine_curve, hx]
    exact sin_xs_pos_peak_eq_one i
  --Derive the final contradiction using s‚ÇÅ, hs‚ÇÅ, hpath_s‚ÇÅ
  -- First show that p t‚ÇÄ = (0, 0)
  have hpt‚ÇÄ : p t‚ÇÄ = (0, 0) := by
    cases p_conn.somePath_mem t‚ÇÄ with
    | inl hS =>
      obtain ‚ü®x, hx_pos, hx_eq‚ü© := hS
      have : x = 0 := by
        calc x = (sine_curve x).1 := rfl
            _ = (p t‚ÇÄ).1 := by simpa [sine_curve] using congrArg Prod.fst hx_eq
            _ = 0 := hpt‚ÇÄ_x
      simp [pos_real] at hx_pos
      linarith
    | inr hZ => exact Set.mem_singleton_iff.mp hZ
  -- s‚ÇÅ is within Œ¥ of t‚ÇÄ (since s‚ÇÅ ‚àà [t‚ÇÄ, t‚ÇÅ] and dist t‚ÇÄ t‚ÇÅ < Œ¥)
  have s‚ÇÅ_close : dist s‚ÇÅ t‚ÇÄ < Œ¥ := by
    calc dist s‚ÇÅ t‚ÇÄ
        ‚â§ dist t‚ÇÅ t‚ÇÄ := dist_right_le_of_mem_uIcc (Icc_subset_uIcc' hs‚ÇÅ)
      _ = dist t‚ÇÄ t‚ÇÅ := dist_comm _ _
      _ < Œ¥ := ht‚ÇÅ.2
  -- By continuity, p(s‚ÇÅ) is close to p(t‚ÇÄ)
  have close : dist (p s‚ÇÅ) (p t‚ÇÄ) < 1/2 := ht s‚ÇÅ s‚ÇÅ_close
  -- But p(s‚ÇÅ) has y-coordinate 1, so it's far from p(t‚ÇÄ) = (0,0)
  have far : 1 ‚â§ dist (p s‚ÇÅ) (p t‚ÇÄ) := by
    calc 1 = |(p s‚ÇÅ).2 - (p t‚ÇÄ).2| := by simp [hpath_s‚ÇÅ, hpt‚ÇÄ]
        _ ‚â§ ‚Äñp s‚ÇÅ - p t‚ÇÄ‚Äñ := norm_ge_abs_snd
        _ = dist (p s‚ÇÅ) (p t‚ÇÄ) := by rw [dist_eq_norm]
  linarith

theorem T_is_conn_not_pathconn : IsConnected T ‚àß ¬¨IsPathConnected T :=
  ‚ü®T_is_conn,T_is_not_path_conn ‚ü©
